@page "/slide"
@inject SlideService SlideService
@implements IAsyncDisposable
@using Microsoft.AspNetCore.Components.Web

<div class="h-screen flex flex-col bg-gray-100">
    <main class="flex-grow flex flex-col justify-center items-center p-4 md:p-8">
        @if (slides.Any() && currentSlideIndex >= 0 && currentSlideIndex < slides.Count)
        {
            <DynamicComponent Type="slides[currentSlideIndex].ComponentType" Parameters="slideParameters" />
        }
        else
        {
            <div class="text-center">
                <h3 class="text-2xl font-bold text-gray-600">Loading...</h3>
                <p class="text-gray-500 mt-2">SignalR Connection: @(IsConnected ? "Connected" : "Disconnected")</p>
                <p class="text-gray-500 mt-1">Total Slides: @slides.Count</p>
                <p class="text-gray-500 mt-1">Current Index: @currentSlideIndex</p>
            </div>
        }
    </main>

    <footer
        class="bg-white border-t border-gray-200 p-4 flex flex-col sm:flex-row items-center justify-between shadow-md print:hidden gap-4 sm:gap-0">
        <div class="text-sm text-gray-600 order-2 sm:order-1">
            <span>@(currentSlideIndex + 1)</span> / <span>@slides.Count</span>
        </div>
        <div class="flex items-center gap-4 order-1 sm:order-2">
            <button @onclick="PreviousSlide" disabled="@(currentSlideIndex <= 0)"
                class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed transition-colors">
                Previous
            </button>
            <button @onclick="NextSlide" disabled="@(currentSlideIndex >= slides.Count - 1)"
                class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors">
                Next
            </button>
        </div>
        <div class="text-sm text-gray-500 order-3 sm:order-3 text-center sm:text-right hidden">
            <button @onclick="ToggleNotes"
                class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors">
                @(showNotes ? "Hide Notes" : "Show Notes")
            </button>
        </div>
    </footer>
</div>

@code {
    private HubConnection? hubConnection;
    private int currentSlideIndex = 0;
    private List<SlideInfo> slides = new();
    private bool showNotes = false;
    private string? apiBaseUrl;
    private Dictionary<string, object> slideParameters => new() { { "ShowNotes", showNotes } };

    protected override async Task OnInitializedAsync()
    {
        slides = SlideService.GetSlides();

        var env = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");
        if (env == "Development")
        {
            apiBaseUrl = "https://localhost:3001";
        }
        else
        {
            apiBaseUrl = "https://api.evren.dev";
        }

        hubConnection = new HubConnectionBuilder()
        .WithUrl($"{apiBaseUrl}/slideHub")
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<int>("ReceiveSlideNumber", async (slideNumber) =>
        {
            var newIndex = slideNumber - 1;
            if (newIndex >= 0 && newIndex < slides.Count)
            {
                currentSlideIndex = newIndex;
                await InvokeAsync(StateHasChanged);
            }
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SignalR Connection Error: {ex.Message}");
        }

        StateHasChanged();
    }

    private async Task PreviousSlide()
    {
        if (currentSlideIndex > 0)
        {
            currentSlideIndex--;
            await SendSlideUpdate();
        }
    }

    private async Task NextSlide()
    {
        if (currentSlideIndex < slides.Count - 1)
        {
            currentSlideIndex++;
            await SendSlideUpdate();
        }
    }

    private void ToggleNotes()
    {
        showNotes = !showNotes;
    }

    private async Task SendSlideUpdate()
    {
        if (IsConnected && hubConnection != null)
        {
            try
            {
                await hubConnection.SendAsync("SendSlideNumber", currentSlideIndex + 1);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Update error: {ex.Message}");
            }
        }
    }
    private DotNetObjectReference<SlideView>? dotNetHelper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("addKeydownListener", dotNetHelper);
        }
    }

    [JSInvokable]
    public async Task HandleKeyDown(string key)
    {
        switch (key)
        {
            case "ArrowRight":
            case " ":
                await NextSlide();
                break;
            case "ArrowLeft":
                await PreviousSlide();
                break;
            case "n":
            case "N":
                ToggleNotes();
                StateHasChanged();
                break;
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
        dotNetHelper?.Dispose();

    }

    [Inject]
    NavigationManager NavigationManager { get; set; } = default!;


    [Inject]
    IJSRuntime JS { get; set; } = default!;
}
